/**
 * ===================================================================
 * Lambda: request_handler.ts
 * ===================================================================
 * This Lambda is the synchronous entry point for the 'requestNewMealPlan' mutation.
 * It creates a 'PENDING' record and asynchronously invokes the generator.
 *
 * Required Environment Variables:
 * - MEALPLANS_TABLE_NAME: The name of your DynamoDB table for meal plans.
 * - GENERATOR_FUNCTION_NAME: The name of the asynchronous generator Lambda function.
 *
 * Required `package.json` dependencies:
 * "dependencies": {
 * "@aws-sdk/client-dynamodb": "^3.525.0",
 * "@aws-sdk/lib-dynamodb": "^3.525.0",
 * "@aws-sdk/client-lambda": "^3.525.0"
 * },
 * "devDependencies": {
 * "@types/aws-lambda": "^8.10.136"
 * }
 * ===================================================================
 */
import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient, PutCommand } from '@aws-sdk/lib-dynamodb';
import { LambdaClient, InvokeCommand } from '@aws-sdk/client-lambda';
import { AppSyncResolverEvent, AppSyncIdentityCognito } from 'aws-lambda';
import { randomUUID } from 'crypto';

// Types are generated by `npm run codegen`
import {
  PlanRequestPreferencesInput,
  PlanStatus,
  MealPlanValidationStatus,
} from '../graphql-types';

// Initialize AWS clients outside the handler for reuse
const ddbClient = new DynamoDBClient({});
const docClient = DynamoDBDocumentClient.from(ddbClient);
const lambdaClient = new LambdaClient({});

// Get environment variables
const { MEALPLANS_TABLE_NAME, GENERATOR_FUNCTION_NAME } = process.env;

interface RequestNewMealPlanArgs {
  prefsOverride: PlanRequestPreferencesInput;
}

// CORRECTED: Type guard to check if the identity is Cognito-based
function isCognitoIdentity(identity: any): identity is AppSyncIdentityCognito {
  return identity && typeof identity.sub === 'string';
}

export const handler = async (
  event: AppSyncResolverEvent<RequestNewMealPlanArgs>,
) => {
  console.log('Received event:', JSON.stringify(event));

  if (!MEALPLANS_TABLE_NAME || !GENERATOR_FUNCTION_NAME) {
    throw new Error(
      'Configuration error: Environment variables MEALPLANS_TABLE_NAME and GENERATOR_FUNCTION_NAME must be set.',
    );
  }

  // --- 1. Get User Info & Input from AppSync event ---
  // CORRECTED: Use a type guard to safely access the user's ID (sub)
  if (!isCognitoIdentity(event.identity)) {
    throw new Error(
      'Authorization error: Not a valid Cognito User Pool identity.',
    );
  }
  const userId = event.identity.sub;
  const prefsOverride = event.arguments.prefsOverride;

  // --- 2. Create Initial MealPlan Item in DynamoDB ---
  const timestamp = new Date().toISOString();
  const mealPlanId = randomUUID();

  const mealPlanItem = {
    PK: `USER#${userId}`, // Partition Key (user)
    SK: `PLAN#${mealPlanId}`, // Sort Key (meal plan unico)

    entityType: 'MEAL_PLAN',
    mealPlanId,
    userId,
    status: PlanStatus.PENDING,
    validationStatus: MealPlanValidationStatus.NOT_VALIDATED,
    generatedAt: timestamp,
    createdAt: timestamp,
    updatedAt: timestamp,
    planName: `New Meal Plan - ${new Date().toLocaleDateString('en-CA')}`,
    dailyPlan: null,
    chatId: null,
  };

  console.log('Creating meal plan item:', JSON.stringify(mealPlanItem));

  const putCommand = new PutCommand({
    TableName: MEALPLANS_TABLE_NAME,
    Item: mealPlanItem,
  });

  try {
    await docClient.send(putCommand);
    console.log('Successfully created item in DynamoDB.');
  } catch (error) {
    console.error('ERROR: Could not write to DynamoDB:', error);
    throw new Error(
      'Internal server error: Could not create meal plan record.',
    );
  }

  // --- 3. Asynchronously Invoke the Generator Lambda ---
  const invocationPayload = {
    mealPlanId,
    userId,
    preferences: prefsOverride,
  };

  console.log(
    `Invoking generator function '${GENERATOR_FUNCTION_NAME}' with payload:`,
    JSON.stringify(invocationPayload),
  );

  const invokeCommand = new InvokeCommand({
    FunctionName: GENERATOR_FUNCTION_NAME,
    InvocationType: 'Event',
    Payload: JSON.stringify(invocationPayload),
  });

  try {
    await lambdaClient.send(invokeCommand);
    console.log('Successfully invoked generator function.');
  } catch (error) {
    console.error('ERROR: Could not invoke generator lambda:', error);
    throw new Error(
      'Internal server error: Could not start meal plan generation.',
    );
  }

  // --- 4. Return the Initial Object to AppSync ---
  console.log(
    'Returning initial meal plan object to AppSync:',
    JSON.stringify(mealPlanItem),
  );
  return mealPlanItem;
};
